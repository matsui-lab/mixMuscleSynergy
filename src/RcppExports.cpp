// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dmvnormFA_rowwiseCpp
arma::vec dmvnormFA_rowwiseCpp(const arma::mat& X, const arma::vec& mu, const arma::mat& Lambda, const arma::vec& Psi_diag);
RcppExport SEXP _mixMuscleSynergy_dmvnormFA_rowwiseCpp(SEXP XSEXP, SEXP muSEXP, SEXP LambdaSEXP, SEXP Psi_diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Psi_diag(Psi_diagSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnormFA_rowwiseCpp(X, mu, Lambda, Psi_diag));
    return rcpp_result_gen;
END_RCPP
}
// faEMupdateCpp
Rcpp::List faEMupdateCpp(const arma::mat& X, int r, int nIterFA);
RcppExport SEXP _mixMuscleSynergy_faEMupdateCpp(SEXP XSEXP, SEXP rSEXP, SEXP nIterFASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type nIterFA(nIterFASEXP);
    rcpp_result_gen = Rcpp::wrap(faEMupdateCpp(X, r, nIterFA));
    return rcpp_result_gen;
END_RCPP
}
// mfaTimeseriesCpp
Rcpp::List mfaTimeseriesCpp(Rcpp::List list_of_data, int K, int r, int max_iter, int nIterFA, double tol, Rcpp::Nullable<Rcpp::IntegerVector> z_init);
RcppExport SEXP _mixMuscleSynergy_mfaTimeseriesCpp(SEXP list_of_dataSEXP, SEXP KSEXP, SEXP rSEXP, SEXP max_iterSEXP, SEXP nIterFASEXP, SEXP tolSEXP, SEXP z_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type list_of_data(list_of_dataSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type nIterFA(nIterFASEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type z_init(z_initSEXP);
    rcpp_result_gen = Rcpp::wrap(mfaTimeseriesCpp(list_of_data, K, r, max_iter, nIterFA, tol, z_init));
    return rcpp_result_gen;
END_RCPP
}
// dmvnormPCA_rowwiseCpp
arma::vec dmvnormPCA_rowwiseCpp(const arma::mat& X, const arma::vec& mu, const arma::mat& W, double sigma2);
RcppExport SEXP _mixMuscleSynergy_dmvnormPCA_rowwiseCpp(SEXP XSEXP, SEXP muSEXP, SEXP WSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnormPCA_rowwiseCpp(X, mu, W, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// pcaEMupdateCpp
Rcpp::List pcaEMupdateCpp(const arma::mat& X, int r, int nIter);
RcppExport SEXP _mixMuscleSynergy_pcaEMupdateCpp(SEXP XSEXP, SEXP rSEXP, SEXP nIterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type nIter(nIterSEXP);
    rcpp_result_gen = Rcpp::wrap(pcaEMupdateCpp(X, r, nIter));
    return rcpp_result_gen;
END_RCPP
}
// pcaClosedFormCpp
Rcpp::List pcaClosedFormCpp(const arma::mat& X, int r);
RcppExport SEXP _mixMuscleSynergy_pcaClosedFormCpp(SEXP XSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(pcaClosedFormCpp(X, r));
    return rcpp_result_gen;
END_RCPP
}
// mpcaTimeseriesCpp
Rcpp::List mpcaTimeseriesCpp(Rcpp::List list_of_data, int K, int r, int max_iter, int nIterPCA, double tol, std::string method, Rcpp::Nullable<Rcpp::IntegerVector> z_init);
RcppExport SEXP _mixMuscleSynergy_mpcaTimeseriesCpp(SEXP list_of_dataSEXP, SEXP KSEXP, SEXP rSEXP, SEXP max_iterSEXP, SEXP nIterPCASEXP, SEXP tolSEXP, SEXP methodSEXP, SEXP z_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type list_of_data(list_of_dataSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type nIterPCA(nIterPCASEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type z_init(z_initSEXP);
    rcpp_result_gen = Rcpp::wrap(mpcaTimeseriesCpp(list_of_data, K, r, max_iter, nIterPCA, tol, method, z_init));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mixMuscleSynergy_dmvnormFA_rowwiseCpp", (DL_FUNC) &_mixMuscleSynergy_dmvnormFA_rowwiseCpp, 4},
    {"_mixMuscleSynergy_faEMupdateCpp", (DL_FUNC) &_mixMuscleSynergy_faEMupdateCpp, 3},
    {"_mixMuscleSynergy_mfaTimeseriesCpp", (DL_FUNC) &_mixMuscleSynergy_mfaTimeseriesCpp, 7},
    {"_mixMuscleSynergy_dmvnormPCA_rowwiseCpp", (DL_FUNC) &_mixMuscleSynergy_dmvnormPCA_rowwiseCpp, 4},
    {"_mixMuscleSynergy_pcaEMupdateCpp", (DL_FUNC) &_mixMuscleSynergy_pcaEMupdateCpp, 3},
    {"_mixMuscleSynergy_pcaClosedFormCpp", (DL_FUNC) &_mixMuscleSynergy_pcaClosedFormCpp, 2},
    {"_mixMuscleSynergy_mpcaTimeseriesCpp", (DL_FUNC) &_mixMuscleSynergy_mpcaTimeseriesCpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_mixMuscleSynergy(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
