% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mfa_em_fit.R
\name{mfa_em_fit}
\alias{mfa_em_fit}
\title{Fit a Mixture Factor Analysis Model (Using mfaTimeseriesCpp)}
\usage{
mfa_em_fit(list_of_data, K, r, max_iter = 50, nIterFA = 20, tol = 0.001)
}
\arguments{
\item{list_of_data}{A list of matrices (each \code{(T_i x M)}) to be modeled.}

\item{K}{Number of clusters.}

\item{r}{Factor dimension.}

\item{max_iter}{Maximum EM iterations for the C++ routine.}

\item{nIterFA}{Number of sub-iterations for the factor analyzer update
(passed to C++). Defaults to 20.}

\item{tol}{Convergence tolerance for log-likelihood difference in the C++ code.}
}
\value{
A list with elements:
\item{z}{Cluster assignment (hard) for each subject, from the C++ result.}
\item{pi}{Cluster mixing proportions.}
\item{mu}{List of cluster means (length K).}
\item{Lambda}{List of factor loading matrices (length K).}
\item{Psi}{List of diagonal noise matrices (length K).}
\item{logLik}{A numeric scalar for the total log-likelihood (computed in R).}
\item{resp}{An \code{(N x K)} matrix of responsibilities, computed in R.}
}
\description{
This function calls the C++ function \code{mfaTimeseriesCpp()} to perform a
Mixture Factor Analysis EM algorithm for fixed \code{K} and \code{r}, and then
calculates the final log-likelihood and responsibilities in R.
}
\details{
The heavy-lifting EM steps occur in \code{mfaTimeseriesCpp()}, which updates parameters
by grouping data for each cluster. After that completes, this function performs a single
pass in R to compute the final responsibilities and log-likelihood by evaluating the mixture
log-density for each subject's data.
}
\examples{
\dontrun{
# Suppose we have a list_of_data with M columns, and we want K=3, r=2:
fit <- mfa_em_fit(list_of_data, K=3, r=2, max_iter=50, nIterFA=20, tol=1e-4)
print(fit$logLik)
head(fit$z)
}

}
