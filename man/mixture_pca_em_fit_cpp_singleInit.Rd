% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mpca_em_fit.R
\name{mixture_pca_em_fit_cpp_singleInit}
\alias{mixture_pca_em_fit_cpp_singleInit}
\title{Single-Run Mixture PCA with a Preset Initial Assignment}
\usage{
mixture_pca_em_fit_cpp_singleInit(
  list_of_data,
  K,
  r,
  max_iter = 50,
  nIterPCA = 20,
  tol = 0.001,
  method = "EM",
  z_init
)
}
\arguments{
\item{list_of_data}{A list of matrices (each \code{T_i x M}).}

\item{K}{Number of clusters.}

\item{r}{Number of principal components (dimension).}

\item{max_iter}{Maximum EM iterations (C++).}

\item{nIterPCA}{Sub-iterations for updating each cluster's PPCA parameters in C++.}

\item{tol}{Convergence tolerance (C++).}

\item{method}{Either \code{"EM"} or \code{"closed_form"}, passed to \code{mpcaTimeseriesCpp}.}

\item{z_init}{An integer vector of length \code{N} giving initial cluster labels (1..K).}
}
\value{
A list with elements:
  \item{z}{Hard cluster assignments (1..K).}
  \item{pi}{Mixing proportions (length K).}
  \item{mu}{List of length K, each a mean vector (length M).}
  \item{W}{List of length K, each an \code{(M x r)} loading matrix (optional).}
  \item{P}{List of length K, each an \code{(M x r)} matrix of principal directions.}
  \item{D}{List of length K, each an \code{(r x r)} diagonal matrix of column norms.}
  \item{Psi}{List of length K, each an \code{(M x M)} diagonal matrix \code{sigma2 * I}.}
  \item{logLik}{Final log-likelihood computed in R.}
  \item{sigma2}{Numeric vector of length K, the final \code{sigma2} for each cluster.}
  \item{resp}{An \code{(N x K)} matrix of responsibilities.}
}
\description{
This helper function calls the updated C++ routine \code{mpcaTimeseriesCpp()}
with a user-specified cluster assignment (\code{z_init}), then converts
the returned \code{W} into \code{(P, D)} and constructs \code{Psi}, and finally
computes the final log-likelihood and responsibilities in R.
}
\examples{
\dontrun{
# Suppose we have list_of_data, K=3, r=2, method="EM", plus some z_init:
z_init <- sample.int(3, size=length(list_of_data), replace=TRUE)
fit_one <- mixture_pca_em_fit_cpp_singleInit(
  list_of_data, K=3, r=2, max_iter=50, nIterPCA=20, tol=1e-3,
  method="EM", z_init=z_init
)
print(fit_one$logLik)
# Now we can call compute_factor_scores_mpca(fit_one, list_of_data) because fit_one$W exists
}

}
